namespace DapperMatic.Providers.MySql;

public class MySqlProviderTypeMap : ProviderTypeMapBase
{
	internal static readonly Lazy<MySqlProviderTypeMap> Instance =
		new(() => new MySqlProviderTypeMap());

	private MySqlProviderTypeMap() : base()
	{
	}

	protected override DbProviderType ProviderType => DbProviderType.MySql;

	/// <summary>
	/// IMPORTANT!! The order within an affinity group matters, as the first possible match will be used as the recommended sql type for a dotnet type
	/// </summary>
	protected override ProviderSqlType[] ProviderSqlTypes =>
	[
		new(ProviderSqlTypeAffinity.Integer, MySqlTypes.sql_tinyint, formatWithPrecision: "tinyint({0})",
			defaultPrecision: 4, canUseToAutoIncrement: true, minValue: -128, maxValue: 128),
		new(ProviderSqlTypeAffinity.Integer, MySqlTypes.sql_tinyint_unsigned,
			formatWithPrecision: "tinyint({0}) unsigned", defaultPrecision: 4, canUseToAutoIncrement: true, minValue: 0,
			maxValue: 255),
		new(ProviderSqlTypeAffinity.Integer, MySqlTypes.sql_smallint, formatWithPrecision: "smallint({0})",
			defaultPrecision: 5, canUseToAutoIncrement: true, minValue: -32768, maxValue: 32767),
		new(ProviderSqlTypeAffinity.Integer, MySqlTypes.sql_smallint_unsigned,
			formatWithPrecision: "smallint({0}) unsigned", defaultPrecision: 5, canUseToAutoIncrement: true,
			minValue: 0, maxValue: 65535),
		new(ProviderSqlTypeAffinity.Integer, MySqlTypes.sql_mediumint, formatWithPrecision: "mediumint({0})",
			defaultPrecision: 7, canUseToAutoIncrement: true, minValue: -8388608, maxValue: 8388607),
		new(ProviderSqlTypeAffinity.Integer, MySqlTypes.sql_mediumint_unsigned,
			formatWithPrecision: "mediumint({0}) unsigned", defaultPrecision: 7, canUseToAutoIncrement: true,
			minValue: 0, maxValue: 16777215),
		new(ProviderSqlTypeAffinity.Integer, MySqlTypes.sql_integer, formatWithPrecision: "integer({0})",
			defaultPrecision: 11, canUseToAutoIncrement: true, minValue: -2147483648, maxValue: 2147483647),
		new(ProviderSqlTypeAffinity.Integer, MySqlTypes.sql_integer_unsigned,
			formatWithPrecision: "integer({0}) unsigned", defaultPrecision: 11, canUseToAutoIncrement: true,
			minValue: 0, maxValue: 4294967295),
		new(ProviderSqlTypeAffinity.Integer, MySqlTypes.sql_int, aliasOf: "integer", formatWithPrecision: "int({0})",
			defaultPrecision: 11, canUseToAutoIncrement: true, minValue: -2147483648, maxValue: 2147483647),
		new(ProviderSqlTypeAffinity.Integer, MySqlTypes.sql_int_unsigned, formatWithPrecision: "int({0}) unsigned",
			defaultPrecision: 11, canUseToAutoIncrement: true, minValue: 0, maxValue: 4294967295),
		new(ProviderSqlTypeAffinity.Integer, MySqlTypes.sql_bigint, formatWithPrecision: "bigint({0})",
			defaultPrecision: 19, canUseToAutoIncrement: true, minValue: -Math.Pow(2, 63),
			maxValue: Math.Pow(2, 63) - 1),
		new(ProviderSqlTypeAffinity.Integer, MySqlTypes.sql_bigint_unsigned,
			formatWithPrecision: "bigint({0}) unsigned", defaultPrecision: 19, canUseToAutoIncrement: true, minValue: 0,
			maxValue: Math.Pow(2, 64) - 1),
		new(ProviderSqlTypeAffinity.Integer, MySqlTypes.sql_serial, aliasOf: "bigint unsigned",
			canUseToAutoIncrement: true, autoIncrementsAutomatically: true, minValue: 0, maxValue: Math.Pow(2, 64) - 1),
		new(ProviderSqlTypeAffinity.Integer, MySqlTypes.sql_bit, formatWithPrecision: "bit({0})", defaultPrecision: 1,
			minValue: 0, maxValue: long.MaxValue),
		new(ProviderSqlTypeAffinity.Real, MySqlTypes.sql_decimal, formatWithPrecision: "decimal({0})",
			formatWithPrecisionAndScale: "decimal({0},{1})", defaultPrecision: 12, defaultScale: 2),
		new(ProviderSqlTypeAffinity.Real, MySqlTypes.sql_dec, aliasOf: "decimal", formatWithPrecision: "dec({0})",
			formatWithPrecisionAndScale: "dec({0},{1})", defaultPrecision: 12, defaultScale: 2),
		new(ProviderSqlTypeAffinity.Real, MySqlTypes.sql_numeric, formatWithPrecision: "numeric({0})",
			formatWithPrecisionAndScale: "numeric({0},{1})", defaultPrecision: 12, defaultScale: 2),
		new(ProviderSqlTypeAffinity.Real, MySqlTypes.sql_fixed, aliasOf: "decimal", formatWithPrecision: "fixed({0})",
			formatWithPrecisionAndScale: "fixed({0},{1})", defaultPrecision: 12, defaultScale: 2),
		new(ProviderSqlTypeAffinity.Real, MySqlTypes.sql_float, formatWithPrecision: "float({0})",
			formatWithPrecisionAndScale: "float({0},{1})", defaultPrecision: 12, defaultScale: 2),
		new(ProviderSqlTypeAffinity.Real, MySqlTypes.sql_real, aliasOf: "double",
			formatWithPrecisionAndScale: "real({0},{1})", defaultPrecision: 12, defaultScale: 2),
		new(ProviderSqlTypeAffinity.Real, MySqlTypes.sql_double_precision, aliasOf: "double",
			formatWithPrecisionAndScale: "double precision({0},{1})", defaultPrecision: 12, defaultScale: 2),
		new(ProviderSqlTypeAffinity.Real, MySqlTypes.sql_double_precision_unsigned, aliasOf: "double unsigned",
			formatWithPrecisionAndScale: "double precision({0},{1}) unsigned", defaultPrecision: 12, defaultScale: 2),
		new(ProviderSqlTypeAffinity.Real, MySqlTypes.sql_double, formatWithPrecisionAndScale: "double({0},{1})",
			defaultPrecision: 12, defaultScale: 2),
		new(ProviderSqlTypeAffinity.Real, MySqlTypes.sql_double_unsigned,
			formatWithPrecisionAndScale: "double({0},{1}) unsigned", defaultPrecision: 12, defaultScale: 2),
		new(ProviderSqlTypeAffinity.Boolean, MySqlTypes.sql_bool, aliasOf: "tinyint(1)"),
		new(ProviderSqlTypeAffinity.Boolean, MySqlTypes.sql_boolean, aliasOf: "tinyint(1)"),
		new(ProviderSqlTypeAffinity.DateTime, MySqlTypes.sql_datetime, formatWithPrecision: "datetime({0})",
			defaultPrecision: 6),
		new(ProviderSqlTypeAffinity.DateTime, MySqlTypes.sql_timestamp, formatWithPrecision: "timestamp({0})",
			defaultPrecision: 6),
		new(ProviderSqlTypeAffinity.DateTime, MySqlTypes.sql_time, formatWithPrecision: "time({0})",
			defaultPrecision: 6, isTimeOnly: true),
		new(ProviderSqlTypeAffinity.DateTime, MySqlTypes.sql_date, isDateOnly: true),
		new(ProviderSqlTypeAffinity.DateTime, MySqlTypes.sql_year, isYearOnly: true),
		new(ProviderSqlTypeAffinity.Text, MySqlTypes.sql_char, formatWithLength: "char({0})", defaultLength: 255,
			isFixedLength: true),
		new(ProviderSqlTypeAffinity.Text, MySqlTypes.sql_varchar, formatWithLength: "varchar({0})",
			defaultLength: 8000),
		new(ProviderSqlTypeAffinity.Text, MySqlTypes.sql_long_varchar, aliasOf: "mediumtext"),
		new(ProviderSqlTypeAffinity.Text, MySqlTypes.sql_tinytext),
		new(ProviderSqlTypeAffinity.Text, MySqlTypes.sql_text, isMaxStringLengthType: true),
		new(ProviderSqlTypeAffinity.Text, MySqlTypes.sql_mediumtext),
		new(ProviderSqlTypeAffinity.Text, MySqlTypes.sql_longtext),
		new(ProviderSqlTypeAffinity.Text, MySqlTypes.sql_enum),
		new(ProviderSqlTypeAffinity.Text, MySqlTypes.sql_set),
		new(ProviderSqlTypeAffinity.Text, MySqlTypes.sql_json),
		new(ProviderSqlTypeAffinity.Binary, MySqlTypes.sql_blob),
		new(ProviderSqlTypeAffinity.Binary, MySqlTypes.sql_tinyblob),
		new(ProviderSqlTypeAffinity.Binary, MySqlTypes.sql_mediumblob),
		new(ProviderSqlTypeAffinity.Binary, MySqlTypes.sql_longblob),
		new(ProviderSqlTypeAffinity.Binary, MySqlTypes.sql_binary, formatWithLength: "binary({0})", defaultLength: 255,
			isFixedLength: true),
		new(ProviderSqlTypeAffinity.Binary, MySqlTypes.sql_varbinary, formatWithLength: "varbinary({0})",
			defaultLength: 8000),
		new(ProviderSqlTypeAffinity.Binary, MySqlTypes.sql_long_varbinary, aliasOf: "mediumblob"),
		new(ProviderSqlTypeAffinity.Geometry, MySqlTypes.sql_geometry),
		new(ProviderSqlTypeAffinity.Geometry, MySqlTypes.sql_point),
		new(ProviderSqlTypeAffinity.Geometry, MySqlTypes.sql_linestring),
		new(ProviderSqlTypeAffinity.Geometry, MySqlTypes.sql_polygon),
		new(ProviderSqlTypeAffinity.Geometry, MySqlTypes.sql_multipoint),
		new(ProviderSqlTypeAffinity.Geometry, MySqlTypes.sql_multilinestring),
		new(ProviderSqlTypeAffinity.Geometry, MySqlTypes.sql_multipolygon),
		new(ProviderSqlTypeAffinity.Geometry, MySqlTypes.sql_geomcollection),
		new(ProviderSqlTypeAffinity.Geometry, MySqlTypes.sql_geometrycollection, aliasOf: "geomcollection")
	];
}